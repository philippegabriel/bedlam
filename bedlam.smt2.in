(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(set-info :status sat)  
(declare-fun Blu0xyz () (_ BitVec 5 ))
(declare-fun Blu1xyz () (_ BitVec 5  ))
(declare-fun Blu2xyz () (_ BitVec 5  ))
(declare-fun Blu3xyz () (_ BitVec 5  ))
(declare-fun Wte0xyz () (_ BitVec 5  ))
(declare-fun Wte1xyz () (_ BitVec 5  ))
(declare-fun Wte2xyz () (_ BitVec 5  ))
(declare-fun Wte3xyz () (_ BitVec 5  ))
(declare-fun Wte4xyz () (_ BitVec 5  ))
(declare-fun Red0xyz () (_ BitVec 5  ))
(declare-fun Red1xyz () (_ BitVec 5  ))
(declare-fun Red2xyz () (_ BitVec 5  ))
(declare-fun Red3xyz () (_ BitVec 5  ))
(declare-fun Blu0shr () (_ BitVec 100  ))
(declare-fun Blu1shr () (_ BitVec 100  ))
(declare-fun Blu2shr () (_ BitVec 100  ))
(declare-fun Blu3shr () (_ BitVec 100  ))
(declare-fun Wte0shr () (_ BitVec 100  ))
(declare-fun Wte1shr () (_ BitVec 100  ))
(declare-fun Wte2shr () (_ BitVec 100  ))
(declare-fun Wte3shr () (_ BitVec 100  ))
(declare-fun Wte4shr () (_ BitVec 100  ))
(declare-fun Red0shr () (_ BitVec 100  ))
(declare-fun Red1shr () (_ BitVec 100  ))
(declare-fun Red2shr () (_ BitVec 100  ))
(declare-fun Red3shr () (_ BitVec 100  ))

;Shift coeficient is within grid
(assert (bvule Blu0shr (_ bv100 100)))
(assert (bvule Blu1shr (_ bv100 100)))
(assert (bvule Blu2shr (_ bv100 100)))
(assert (bvule Blu3shr (_ bv100 100)))
(assert (bvule Wte0shr (_ bv100 100)))
(assert (bvule Wte1shr (_ bv100 100)))
(assert (bvule Wte2shr (_ bv100 100)))
(assert (bvule Wte3shr (_ bv100 100)))
(assert (bvule Wte4shr (_ bv100 100)))
(assert (bvule Red0shr (_ bv100 100)))
(assert (bvule Red1shr (_ bv100 100)))
(assert (bvule Red2shr (_ bv100 100)))
(assert (bvule Red3shr (_ bv100 100)))

;
;Define the grid
;
(define-fun empty () (_ BitVec 100)  (_ bv0 100 ))
(define-fun fullGrid () (_ BitVec 100) #b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111)
(define-fun grid () (_ BitVec 100) #b0000100001000010000111111000010000100001000011111100001000010000100001111110000100001000010000111111)

;##########################################################Begin auto generated section#######################################################
;#include autogenerated
;##########################################################End   auto generated section#######################################################

;
;pick a shift coefficient
;
(define-fun Blu0shft () (_ BitVec 100) (bvlshr (Blu0 Blu0xyz) Blu0shr))
(define-fun Blu1shft () (_ BitVec 100) (bvlshr (Blu1 Blu1xyz) Blu1shr))
(define-fun Blu2shft () (_ BitVec 100) (bvlshr (Blu2 Blu2xyz) Blu2shr))
(define-fun Blu3shft () (_ BitVec 100) (bvlshr (Blu3 Blu3xyz) Blu3shr))
(define-fun Wte0shft () (_ BitVec 100) (bvlshr (Wte0 Wte0xyz) Wte0shr))
(define-fun Wte1shft () (_ BitVec 100) (bvlshr (Wte1 Wte1xyz) Wte1shr))
(define-fun Wte2shft () (_ BitVec 100) (bvlshr (Wte2 Wte2xyz) Wte2shr))
(define-fun Wte3shft () (_ BitVec 100) (bvlshr (Wte3 Wte3xyz) Wte3shr))
(define-fun Wte4shft () (_ BitVec 100) (bvlshr (Wte4 Wte4xyz) Wte4shr))
(define-fun Red0shft () (_ BitVec 100) (bvlshr (Red0 Red0xyz) Red0shr))
(define-fun Red1shft () (_ BitVec 100) (bvlshr (Red1 Red1xyz) Red1shr))
(define-fun Red2shft () (_ BitVec 100) (bvlshr (Red2 Red2xyz) Red2shr))
(define-fun Red3shft () (_ BitVec 100) (bvlshr (Red3 Red3xyz) Red3shr))

;Pieces don't colide with borders
(assert	(= empty (bvand grid Blu0shft)))
(assert (= empty (bvand grid Blu1shft)))
(assert (= empty (bvand grid Blu2shft)))
(assert	(= empty (bvand grid Blu3shft)))
(assert	(= empty (bvand grid Wte0shft)))
(assert	(= empty (bvand grid Wte1shft)))
(assert	(= empty (bvand grid Wte2shft)))
(assert	(= empty (bvand grid Wte3shft)))
(assert	(= empty (bvand grid Wte4shft)))
(assert	(= empty (bvand grid Red0shft)))
(assert	(= empty (bvand grid Red1shft)))
(assert	(= empty (bvand grid Red2shft)))
(assert	(= empty (bvand grid Red3shft)))

; Pieces don't colide with each other
(assert (= empty (bvand Blu0shft Blu1shft)))
(assert (= empty (bvand Blu0shft Blu2shft)))
(assert (= empty (bvand Blu0shft Blu3shft)))
(assert (= empty (bvand Blu0shft Wte0shft)))
(assert (= empty (bvand Blu0shft Wte1shft)))
(assert (= empty (bvand Blu0shft Wte2shft)))
(assert (= empty (bvand Blu0shft Wte3shft)))
(assert (= empty (bvand Blu0shft Wte4shft)))
(assert (= empty (bvand Blu0shft Red0shft)))
(assert (= empty (bvand Blu0shft Red1shft)))
(assert (= empty (bvand Blu0shft Red2shft)))
(assert (= empty (bvand Blu0shft Red3shft)))

(assert (= empty (bvand Blu1shft Blu0shft)))
(assert (= empty (bvand Blu1shft Blu2shft)))
(assert (= empty (bvand Blu1shft Blu3shft)))
(assert (= empty (bvand Blu1shft Wte0shft)))
(assert (= empty (bvand Blu1shft Wte1shft)))
(assert (= empty (bvand Blu1shft Wte2shft)))
(assert (= empty (bvand Blu1shft Wte3shft)))
(assert (= empty (bvand Blu1shft Wte4shft)))
(assert (= empty (bvand Blu1shft Red0shft)))
(assert (= empty (bvand Blu1shft Red1shft)))
(assert (= empty (bvand Blu1shft Red2shft)))
(assert (= empty (bvand Blu1shft Red3shft)))

(assert (= empty (bvand Blu2shft Blu0shft)))
(assert (= empty (bvand Blu2shft Blu1shft)))
(assert (= empty (bvand Blu2shft Blu3shft)))
(assert (= empty (bvand Blu2shft Wte0shft)))
(assert (= empty (bvand Blu2shft Wte1shft)))
(assert (= empty (bvand Blu2shft Wte2shft)))
(assert (= empty (bvand Blu2shft Wte3shft)))
(assert (= empty (bvand Blu2shft Wte4shft)))
(assert (= empty (bvand Blu2shft Red0shft)))
(assert (= empty (bvand Blu2shft Red1shft)))
(assert (= empty (bvand Blu2shft Red2shft)))
(assert (= empty (bvand Blu2shft Red3shft)))

(assert (= empty (bvand Blu3shft Blu0shft)))
(assert (= empty (bvand Blu3shft Blu1shft)))
(assert (= empty (bvand Blu3shft Blu2shft)))
(assert (= empty (bvand Blu3shft Wte0shft)))
(assert (= empty (bvand Blu3shft Wte1shft)))
(assert (= empty (bvand Blu3shft Wte2shft)))
(assert (= empty (bvand Blu3shft Wte3shft)))
(assert (= empty (bvand Blu3shft Wte4shft)))
(assert (= empty (bvand Blu3shft Red0shft)))
(assert (= empty (bvand Blu3shft Red1shft)))
(assert (= empty (bvand Blu3shft Red2shft)))
(assert (= empty (bvand Blu3shft Red3shft)))

(assert (= empty (bvand Red0shft Blu0shft)))
(assert (= empty (bvand Red0shft Blu1shft)))
(assert (= empty (bvand Red0shft Blu2shft)))
(assert (= empty (bvand Red0shft Blu3shft)))
(assert (= empty (bvand Red0shft Wte0shft)))
(assert (= empty (bvand Red0shft Wte1shft)))
(assert (= empty (bvand Red0shft Wte2shft)))
(assert (= empty (bvand Red0shft Wte3shft)))
(assert (= empty (bvand Red0shft Wte4shft)))
(assert (= empty (bvand Red0shft Red1shft)))
(assert (= empty (bvand Red0shft Red2shft)))
(assert (= empty (bvand Red0shft Red3shft)))

(assert (= empty (bvand Red1shft Blu0shft)))
(assert (= empty (bvand Red1shft Blu1shft)))
(assert (= empty (bvand Red1shft Blu2shft)))
(assert (= empty (bvand Red1shft Blu3shft)))
(assert (= empty (bvand Red1shft Wte0shft)))
(assert (= empty (bvand Red1shft Wte1shft)))
(assert (= empty (bvand Red1shft Wte2shft)))
(assert (= empty (bvand Red1shft Wte3shft)))
(assert (= empty (bvand Red1shft Wte4shft)))
(assert (= empty (bvand Red1shft Red0shft)))
(assert (= empty (bvand Red1shft Red2shft)))
(assert (= empty (bvand Red1shft Red3shft)))

(assert (= empty (bvand Red2shft Blu0shft)))
(assert (= empty (bvand Red2shft Blu1shft)))
(assert (= empty (bvand Red2shft Blu2shft)))
(assert (= empty (bvand Red2shft Blu3shft)))
(assert (= empty (bvand Red2shft Wte0shft)))
(assert (= empty (bvand Red2shft Wte1shft)))
(assert (= empty (bvand Red2shft Wte2shft)))
(assert (= empty (bvand Red2shft Wte3shft)))
(assert (= empty (bvand Red2shft Wte4shft)))
(assert (= empty (bvand Red2shft Red1shft)))
(assert (= empty (bvand Red2shft Red0shft)))
(assert (= empty (bvand Red2shft Red3shft)))

(assert (= empty (bvand Red3shft Blu0shft)))
(assert (= empty (bvand Red3shft Blu1shft)))
(assert (= empty (bvand Red3shft Blu2shft)))
(assert (= empty (bvand Red3shft Blu3shft)))
(assert (= empty (bvand Red3shft Wte0shft)))
(assert (= empty (bvand Red3shft Wte1shft)))
(assert (= empty (bvand Red3shft Wte2shft)))
(assert (= empty (bvand Red3shft Wte3shft)))
(assert (= empty (bvand Red3shft Wte4shft)))
(assert (= empty (bvand Red3shft Red1shft)))
(assert (= empty (bvand Red3shft Red2shft)))
(assert (= empty (bvand Red3shft Red0shft)))

(assert (= empty (bvand Wte0shft Blu0shft)))
(assert (= empty (bvand Wte0shft Blu1shft)))
(assert (= empty (bvand Wte0shft Blu2shft)))
(assert (= empty (bvand Wte0shft Blu3shft)))
(assert (= empty (bvand Wte0shft Wte1shft)))
(assert (= empty (bvand Wte0shft Wte2shft)))
(assert (= empty (bvand Wte0shft Wte3shft)))
(assert (= empty (bvand Wte0shft Wte4shft)))
(assert (= empty (bvand Wte0shft Red0shft)))
(assert (= empty (bvand Wte0shft Red1shft)))
(assert (= empty (bvand Wte0shft Red2shft)))
(assert (= empty (bvand Wte0shft Red3shft)))

(assert (= empty (bvand Wte1shft Blu0shft)))
(assert (= empty (bvand Wte1shft Blu1shft)))
(assert (= empty (bvand Wte1shft Blu2shft)))
(assert (= empty (bvand Wte1shft Blu3shft)))
(assert (= empty (bvand Wte1shft Wte0shft)))
(assert (= empty (bvand Wte1shft Wte2shft)))
(assert (= empty (bvand Wte1shft Wte3shft)))
(assert (= empty (bvand Wte1shft Wte4shft)))
(assert (= empty (bvand Wte1shft Red0shft)))
(assert (= empty (bvand Wte1shft Red1shft)))
(assert (= empty (bvand Wte1shft Red2shft)))
(assert (= empty (bvand Wte1shft Red3shft)))

(assert (= empty (bvand Wte2shft Blu0shft)))
(assert (= empty (bvand Wte2shft Blu1shft)))
(assert (= empty (bvand Wte2shft Blu2shft)))
(assert (= empty (bvand Wte2shft Blu3shft)))
(assert (= empty (bvand Wte2shft Wte1shft)))
(assert (= empty (bvand Wte2shft Wte0shft)))
(assert (= empty (bvand Wte2shft Wte3shft)))
(assert (= empty (bvand Wte2shft Wte4shft)))
(assert (= empty (bvand Wte2shft Red0shft)))
(assert (= empty (bvand Wte2shft Red1shft)))
(assert (= empty (bvand Wte2shft Red2shft)))
(assert (= empty (bvand Wte2shft Red3shft)))

(assert (= empty (bvand Wte3shft Blu0shft)))
(assert (= empty (bvand Wte3shft Blu1shft)))
(assert (= empty (bvand Wte3shft Blu2shft)))
(assert (= empty (bvand Wte3shft Blu3shft)))
(assert (= empty (bvand Wte3shft Wte1shft)))
(assert (= empty (bvand Wte3shft Wte2shft)))
(assert (= empty (bvand Wte3shft Wte0shft)))
(assert (= empty (bvand Wte3shft Wte4shft)))
(assert (= empty (bvand Wte3shft Red0shft)))
(assert (= empty (bvand Wte3shft Red1shft)))
(assert (= empty (bvand Wte3shft Red2shft)))
(assert (= empty (bvand Wte3shft Red3shft)))

(assert (= empty (bvand Wte4shft Blu0shft)))
(assert (= empty (bvand Wte4shft Blu1shft)))
(assert (= empty (bvand Wte4shft Blu2shft)))
(assert (= empty (bvand Wte4shft Blu3shft)))
(assert (= empty (bvand Wte4shft Wte1shft)))
(assert (= empty (bvand Wte4shft Wte2shft)))
(assert (= empty (bvand Wte4shft Wte3shft)))
(assert (= empty (bvand Wte4shft Wte0shft)))
(assert (= empty (bvand Wte4shft Red0shft)))
(assert (= empty (bvand Wte4shft Red1shft)))
(assert (= empty (bvand Wte4shft Red2shft)))
(assert (= empty (bvand Wte4shft Red3shft)))

;combine all pieces together
(assert	(= fullGrid (bvor grid
					(bvor Blu0shft(bvor Blu1shft(bvor Blu2shft(bvor Blu3shft
					(bvor Wte0shft(bvor Wte1shft(bvor Wte2shft (bvor Wte3shft (bvor Wte4shft 
					(bvor Red0shft(bvor Red1shft(bvor Red2shft Red3shft))))))))))))
	))
)
(check-sat)
(get-model)
(exit)


